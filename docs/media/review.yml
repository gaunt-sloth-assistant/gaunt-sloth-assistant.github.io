name: AI PR Review (Anthropic)

# The pull_request_target is an important feature. It is running on files from `main`.
on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches:
      - 'main'

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.head_ref, 'dependabot') }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm i gaunt-sloth-assistant@0.9.7 -g && gth --version

      - name: Extract issue number from PR title
        id: extract_issue
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          ISSUE_NUMBER=$(echo "$PR_TITLE" | grep -oE '^[0-9]{2,5} ' | tr -d ' ' || true)
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Perform code review
        id: review
        run: |
          if [ -z "${{ steps.extract_issue.outputs.issue_number }}" ]; then
            echo "ℹ️ **Tip:** To link this PR to an issue, start your PR title with the issue number followed by a space (e.g., '123 Fix authentication bug')" | tee review.md
            echo "" >> review.md
            gth --nopipe -c ".github/workflows/.gsloth.config.json" pr ${{ github.event.pull_request.number }}
          else
            gth --nopipe -c ".github/workflows/.gsloth.config.json" pr ${{ github.event.pull_request.number }} ${{ steps.extract_issue.outputs.issue_number }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Hide older AI review comments and post new one
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');

            // Define a unique identifier for AI review comments
            const AI_REVIEW_IDENTIFIER = '<!-- AI-PR-REVIEW-BOT -->';

            // Get all comments on this PR
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Find and hide older AI review comments
            const aiComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.startsWith(AI_REVIEW_IDENTIFIER)
            );

            // Hide older comments by wrapping them in a collapsible section
            for (const comment of aiComments) {
              const hiddenBody = `<details>
            <summary>🤖 Previous AI Review (Click to expand)</summary>

            ${comment.body}
            </details>`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: hiddenBody
              });
            }

            // Create new comment with the identifier
            const newCommentBody = `${AI_REVIEW_IDENTIFIER}

            ${review}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: newCommentBody
            });
